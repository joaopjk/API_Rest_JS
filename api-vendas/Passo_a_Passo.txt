https://www.aluiziodeveloper.com.br/

yarn init -y
yarn add typescript ts-node-dev @types/node -D

Criar arquivo tsconfig.json
yarn tsc --init --rootDir src --outDir build \
--esModuleInterop --resolveJsonModule --lib es6 \
--module commonjs --allowJs true --noImplicitAny true

src/server.js

Configuração do script de execução:
"scripts": {
  "dev": "ts-node-dev --inspect --transpile-only --ignore-watch node_modules src/server.ts"
}

Editor Config:
Clicar com o botão direito na aba de exploração e criar o editor config

Consigurando EsLint : https://www.aluiziodeveloper.com.br/eslint/
yarn add -D eslint @typescript-eslint/parser @typescript-eslint/eslint-plugin
Na raiz do seu projeto crie um arquivo .eslintrc com uma configuração inicial do ESLint:
Criar o arquivo .eslintignore:
Adicionar um script no arquivo package.json para executar o lint

Prettier:https://www.aluiziodeveloper.com.br/prettier/
yarn add prettier -D
.prettierrc
{
  "semi": true,
  "trailingComma": "all",
  "singleQuote": true,
  "printWidth": 80,
  "arrowParens": "avoid"
}
yarn add eslint-config-prettier@6.15.0 eslint-plugin-prettier@3.2.0 -D

================Estrutura do Projeto============
config: Configurações de bibliotecas externas, como por exemplo, autenticação,uploado,email e etc.
modules: abrangem as áreas de conhecimento da aplicação, diretamente relacionas com as regras de negócio.
shared: Modulos compartilhados entre todos os modulos da aplicação.
services: estarão dentro de cada modulo da aplicação e serão responsáveis por todas as regras que a aplicação, como por exemplo, server.ts,
rotas, conexão com o banco de dados ...

yarn add -D tsconfig-paths
Configuração de importação - tsconfig.json
"paths":{
	"@config/*":["scr/config/*"],
	"@modules/*":["scr/modules/*"],
	"@shared/*":["scr/shared/*"]
}

============Configuração para rodar o projeto =====
yarn add express cors express-async-errors
yarn add -D @types/express
yarn add -D @types/cors

server.ts
import express from 'express';
import cors from 'cors';
import routes from './routes/index';

const app = express();

app.use(cors()); //Configurando o Cors na aplicação
app.use(express.json()); //Configurando para api aceitar Json
app.use(routes);

app.listen(3333, () => {
  console.log('Server started on port 3333');
});

routs.js
import { Router } from 'express';

const routes = Router();

routes.get('/', (request, response) => {
  return response.json({ message: 'Hello Dev !' });
});

export default routes;

================Configuração do tratamento de erros da Aplicação 
class AppError {
  public readonly message: string;
  public readonly statusCode: number;

  constructor(message: string, statusCode = 400) {
    this.message = message;
    this.statusCode = statusCode;
  }
}

export default AppError;

server.ts
app.use(
  (error: Error, request: Request, response: Response, next: NextFunction) => {
    if (error instanceof AppError) {
      return response.status(error.statusCode).json({
        status: 'Error',
        message: error.message,
      });
    }

    return response.status(500).json({
      status: 'error',
      message: 'Internal Server Error',
    });
  },
); //Configuração do tratamento de erros


==================TypeORM=================
yarn add typeorm reflect-metadata pg
server.ts
import 'reflect-metadata';

ormconfig.json:
{
  "type": "postgres",
  "host": "localhost",
  "port": 5432,
  "username": "postgres",
  "password": "docker",
  "database": "apivendas"
}

typeorm/index.ts:
import { createConnection } from 'typeorm';

createConnection();

server.ts:
import '@shared/typeorm';

docker run --name postgres -e POSTGRES_PASSWORD=docker -p 5432:5432 -d postgres

ormconfig:
  "migrations":[
    "./src/shared/typeorm/migrations/*.ts"
  ],
  "cli":{
    "migrationDir":"./src/shared/typeorm/migrations"
  }
  
package.json:
"typeorm":"ts-node-dev ./node_modules/typeorm/cli.js"

============Criando tabelas
yarn typeorm migration:create -n CreateProducts